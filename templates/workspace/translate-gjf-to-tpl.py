# Alex Cappiello
# 9/17/2011
# Utility to convert Gaussian input files generated by AMPAC to a
# form to be used for the msqc project

# File IO helper functions
# David Kosbie, 2011

import os

def fileExists(filename):
    return os.path.exists(filename)
   
def deleteFile(filename):
    if (fileExists(filename) == True):
        os.remove(filename)

def readTextFile(filename):
    if (fileExists(filename) == False):
        print "File does not exist:", filename
        return None
    fileHandler = open(filename, "rt")
    text = fileHandler.read()
    fileHandler.close()
    return text

def readTextFileAsList(filename):
    # readlines includes '\n' characters, so we'll use split() instead
    text = readTextFile(filename)
    if (text == None):
        return None
    return text.split("\n")

def writeTextFile(text, filename):
    fileHandler = open(filename, "wt")
    fileHandler.write(text)
    fileHandler.close()

# Begin relevant code

def run_conversion( infile, outfile ):
    input = readTextFile( infile )
    print( "Read " + infile )

    # Cut off beginning and end junk
    start = input.find( "0 1" )
    data = input[ start + 4: ]
    data = data[ : data.rfind( "\n\n" ) ]
    data = data[ : data.rfind( "\n\n" ) ]

    i = 0
    n = 1
    split = data.find( "\n\n" )

    # Add ATOM and count after each chemical symbol in the first section
    while ( i < split ):
        i_old = i
        i = data.find( "\n", i ) + 6
        data = data[ : i_old + 2 ] + "ATOM" + str( n ) + \
            data[ i_old + 2 + len( str( n ) ) - 1 : ]
        n += 1

    # Add end data
    data += "\n\n!ENV"
    
    print "Output:\n", data

    writeTextFile( data, outfile )
    print( "Wrote " + outfile )

name = raw_input( "Molecule Name? " )

if ( ".gjf" == name[ -4 : ] ):
    name = name[ : -4 ]

infile = name + ".gjf"
outfile = name + ".tpl"

run_conversion( infile, outfile )
